1.加入Spring
	1)加入jar包
	2)配置web.xml文件
	3)加入Spring的配置文件
2.加入Hibernate
	1).同时建立持久化类，和其对应的.hbm.xml文件，生成对应的数据表
	2).Spring 整合hibernate
	3).步骤：
	 加入jar包
	 在类路径下加入hibernate.cfg.xml配置文件，在其中配置hibernate的基本属性
	 建立持久化类，和其对应的.hbm.xml文件
	 和Spring进行整合
	 i.加入c3p0数据源 和MySQL的驱动
	 j.在Spring配置文件中配置：数据源（引入一个c3p0的jar包），SessionFactory，声明式事务，还要引mysql的jar包（5.1.7）
	 k.写个.properties文件 （db.properties）
	 	jdbc.user=root
	 	jdbc.password=password
	 	jdbc.driverClass=com.mysql.jdbc.Driver
	 	jdbc.jdbcUrl=jdbc:mysql:///数据库名
	 	
	 	jdbc.initPoolSize=5
	 	jdbc.maxPoolSize=10
	 	#...
	 	
	 l.在applicationContext.xml文件中配置
	 <!--导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!--配置c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />

		<property name="initialPoolSize" value="${jdbc.initPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
	</bean>

	<!--配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframe.orm.hibernate4.localSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configlocation" value="classpath:hibernate.cfg.xml" />
		<property name="mappingLocation" value="classpath:com/benson/ssh/entities/*.hbm.xml" />
	</bean>

	<!--m.这时候可以启动项目，会自动产生一些数据库表，然后可以自行添加数据 n.在applicationContext.xml配置文件中添加声明式事务 -->
	<!--1.配置hibernate的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!--2.配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!--3.配置事务切入点 再把事务属性和事务切入点关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.benson.service.*.*(..))"
			id="txPointcut" />
		<!--将事务属性和事务切入点关联起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	 
	 启动项目，会看到生成对应的数据库表
	 
3.加入strut2 
	1).加入jar包   若有重复的jar包，则需要删除重复的jar包 javassist-3.11.0.GA.jar
	2).在web.xml文件中配置struts的核心过滤器filter
	3).加入struts2的配置文件  strut2.xml
	4).整合Spring
		加入Strut2的Spring 插件的jar包
		在Spring的配置文件中正常配置action，注意Action的scope为protetype
		在strut2的配置文件中配置action时，class属性执行该Action在IoC中的id

4.完成功能
	1).获取所有的员工信息   如果在dao只查询employee的话，那么会发生懒加载  
		三种解决办法：在Employee的映射文件中加 lazy="false"   (不推荐使用)
				from Employee e left outer join fetch e.department
				使用OpenSessionInViewFilter：在页面加载的时候都打开着Session
	2).删除员工信息
		正常删除：返回值是redirect类型，而且重定向到Action中的emp-list中
		确定要删除吗  的提示使用jQuery完成
	3).添加员工
		显示表单页面，先查询所有的部门信息
		使用Strut2的ModelDriven和Preparable拦截器
		时间是一个字符串，需要转为一个date类型的对象